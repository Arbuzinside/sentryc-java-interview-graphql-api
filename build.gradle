plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.sentryc'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

processResources {
	filesMatching("**/application.properties") {
		expand( project.properties )
	}
}

import java.nio.file.Files
import java.nio.file.Paths

task processYml {
	doLast {
		def ymlFile = file('src/main/resources/application.yml')
		def content = ymlFile.text

		def props = new Properties()
		file('gradle.properties').withInputStream { stream ->
			props.load(stream)
		}

		props.each { key, value ->
			content = content.replace("\${${key}}", value)
		}

		Files.write(Paths.get('src/main/resources/application.yml'), content.bytes)
	}
}

processResources.dependsOn processYml
